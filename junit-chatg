import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import org.apache.sling.api.resource.Resource;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.ArrayList;
import java.util.List;

@RunWith(MockitoJUnitRunner.class)
public class RTEEmojiConfigModelTest {

    @Mock
    private Resource resourceMock;

    @Mock
    private RTEEmojiConfigBean emojiConfigBeanMock1;

    @Mock
    private RTEEmojiConfigBean emojiConfigBeanMock2;

    @InjectMocks
    private RTEEmojiConfigModel emojiConfigModel;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        // Setting up mocked emoji config beans
        when(emojiConfigBeanMock1.getEmojiName()).thenReturn("smile");
        when(emojiConfigBeanMock1.getEmojiValue()).thenReturn("üòä");

        when(emojiConfigBeanMock2.getEmojiName()).thenReturn("grin");
        when(emojiConfigBeanMock2.getEmojiValue()).thenReturn("üòÅ");

        // Prepare the list of mocked emoji config beans
        List<RTEEmojiConfigBean> emojiConfigList = new ArrayList<>();
        emojiConfigList.add(emojiConfigBeanMock1);
        emojiConfigList.add(emojiConfigBeanMock2);

        // Mock the behavior of the ChildResource injection
        when(resourceMock.adaptTo(List.class)).thenReturn(emojiConfigList);
    }

    @Test
    public void testGetEmojiConfigs() {
        // Act
        List<RTEEmojiConfigBean> configs = emojiConfigModel.getEmojiConfigs();

        // Assert
        assertEquals(2, configs.size());
        assertEquals("smile", configs.get(0).getEmojiName());
        assertEquals("üòä", configs.get(0).getEmojiValue());
        assertEquals("grin", configs.get(1).getEmojiName());
        assertEquals("üòÅ", configs.get(1).getEmojiValue());
    }
}
