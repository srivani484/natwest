package com.responsive.cer.models;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

@RunWith(PowerMockRunner.class)
@PrepareForTest(RTEEmojiConfigModel.class)
public class RTEEmojiConfigModelTest {

    @Mock
    private Resource resourceMock;

    @Mock
    private Resource emojiConfigResourceMock;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        
        // Mock the main resource that the model adapts from
        when(resourceMock.getResourceType()).thenReturn("responsive/components/configs/emojiconfig");
        
        // Create child resources for emoji configurations
        List<Resource> childResources = new ArrayList<>();
        
        // Mock Resource for Emoji 1
        Resource emoji1 = mock(Resource.class);
        ValueMap valueMap1 = mock(ValueMap.class);
        when(valueMap1.get("emojiName", String.class)).thenReturn("e1-0-grinning-face");
        when(valueMap1.get("emojiValue", String.class)).thenReturn("&#128540");
        when(emoji1.adaptTo(ValueMap.class)).thenReturn(valueMap1);
        childResources.add(emoji1);

        // Mock Resource for Emoji 2
        Resource emoji2 = mock(Resource.class);
        ValueMap valueMap2 = mock(ValueMap.class);
        when(valueMap2.get("emojiName", String.class)).thenReturn("e0-6-grinning-face-with-big-eye");
        when(valueMap2.get("emojiValue", String.class)).thenReturn("&#x1F600");
        when(emoji2.adaptTo(ValueMap.class)).thenReturn(valueMap2);
        childResources.add(emoji2);

        // Mock the behavior of the resource to return child resources
        when(resourceMock.listChildren()).thenReturn(childResources.iterator());

        // PowerMock to mock the static behavior of the Sling model's adaptation
        PowerMockito.whenNew(RTEEmojiConfigModel.class).withArguments(resourceMock).thenReturn(new RTEEmojiConfigModel());
    }

    @Test
    public void testGetEmojiConfigs() throws Exception {
        // Create the model instance using PowerMockito
        RTEEmojiConfigModel emojiConfigModel = PowerMockito.mock(RTEEmojiConfigModel.class);
        
        // Mock the getEmojiConfigs method
        when(emojiConfigModel.getEmojiConfigs()).thenCallRealMethod();
        
        // Call the method under test
        List<RTEEmojiConfigBean> emojiConfigs = emojiConfigModel.getEmojiConfigs();

        // Assert that the number of emojis is as expected
        assertEquals(2, emojiConfigs.size());
        assertEquals("e1-0-grinning-face", emojiConfigs.get(0).getEmojiName());
        assertEquals("&#128540", emojiConfigs.get(0).getEmojiValue());
        assertEquals("e0-6-grinning-face-with-big-eye", emojiConfigs.get(1).getEmojiName());
        assertEquals("&#x1F600", emojiConfigs.get(1).getEmojiValue());
    }

    @Test
    public void testGetEmojiConfigsEmpty() throws Exception {
        // Set the resource to return an empty list of children
        when(resourceMock.listChildren()).thenReturn(Collections.emptyIterator());

        // Create the model instance using PowerMockito
        RTEEmojiConfigModel emojiConfigModel = PowerMockito.mock(RTEEmojiConfigModel.class);
        
        // Mock the getEmojiConfigs method
        when(emojiConfigModel.getEmojiConfigs()).thenCallRealMethod();

        // Call the method under test
        List<RTEEmojiConfigBean> emojiConfigs = emojiConfigModel.getEmojiConfigs();

        // Assert that the returned list is empty
        assertEquals(0, emojiConfigs.size());
    }
}
