import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

public class RTEEmojiConfigModelTest {

    @Mock
    private Resource resourceMock;

    @Mock
    private RTEEmojiConfigBean emojiConfigBeanMock;

    private RTEEmojiConfigModel emojiConfigModel;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        
        // Stubbing the behavior of emojiConfigBeanMock
        when(emojiConfigBeanMock.getEmojiName()).thenReturn("smile");
        when(emojiConfigBeanMock.getEmojiValue()).thenReturn("ðŸ˜Š");

        // Creating a list to simulate multiple emoji configurations
        List<RTEEmojiConfigBean> emojiConfigList = new ArrayList<>();
        emojiConfigList.add(emojiConfigBeanMock);
        
        // Assuming that the constructor for RTEEmojiConfigModel is set up to accept the list directly for the purpose of this test
        emojiConfigModel = new RTEEmojiConfigModel(emojiConfigList);
    }

    @Test
    public void testGetEmojiConfigs() {
        List<RTEEmojiConfigBean> configs = emojiConfigModel.getEmojiConfigs();
        assertEquals(1, configs.size());
        assertEquals("smile", configs.get(0).getEmojiName());
        assertEquals("ðŸ˜Š", configs.get(0).getEmojiValue());
    }
}
