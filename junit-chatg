import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.models.factory.ModelFactory;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.ArrayList;
import java.util.List;

@RunWith(MockitoJUnitRunner.class)
public class RTEEmojiConfigModelTest {

    @Mock
    private Resource resourceMock;

    @Mock
    private Resource emojiConfigResourceMock;

    @Mock
    private ModelFactory modelFactory;

    @InjectMocks
    private RTEEmojiConfigModel emojiConfigModel;

    private RTEEmojiConfigBean emojiConfigBean1;
    private RTEEmojiConfigBean emojiConfigBean2;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        // Create mock emoji config beans
        emojiConfigBean1 = createEmojiConfigBean("smile", "üòä");
        emojiConfigBean2 = createEmojiConfigBean("grin", "üòÅ");

        // Mock the child resource retrieval
        when(resourceMock.getChild("emojiconfigs")).thenReturn(emojiConfigResourceMock);
        when(emojiConfigResourceMock.adaptTo(RTEEmojiConfigBean.class)).thenReturn(emojiConfigBean1, emojiConfigBean2);

        // Simulating the behavior of getEmojiConfigs
        List<RTEEmojiConfigBean> emojiConfigList = new ArrayList<>();
        emojiConfigList.add(emojiConfigBean1);
        emojiConfigList.add(emojiConfigBean2);
        when(emojiConfigModel.getEmojiConfigs()).thenReturn(emojiConfigList);
    }

    @Test
    public void testGetEmojiConfigs() {
        List<RTEEmojiConfigBean> emojiConfigs = emojiConfigModel.getEmojiConfigs();
        assertEquals(2, emojiConfigs.size());
        assertEquals("smile", emojiConfigs.get(0).getEmojiName());
        assertEquals("üòä", emojiConfigs.get(0).getEmojiValue());
        assertEquals("grin", emojiConfigs.get(1).getEmojiName());
        assertEquals("üòÅ", emojiConfigs.get(1).getEmojiValue());
    }

    private RTEEmojiConfigBean createEmojiConfigBean(String name, String value) {
        RTEEmojiConfigBean bean = mock(RTEEmojiConfigBean.class);
        when(bean.getEmojiName()).thenReturn(name);
        when(bean.getEmojiValue()).thenReturn(value);
        return bean;
    }
}
