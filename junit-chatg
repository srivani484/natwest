package com.responsive.cer.models;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.models.factory.ModelFactory;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class RTEEmojiConfigModelTest {

    @Mock
    private Resource resourceMock;

    @Mock
    private Resource emojiConfigResourceMock;

    private RTEEmojiConfigModel emojiConfigModel;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        
        // Mocking the emojiConfigs as child resources
        List<Resource> childResources = new ArrayList<>();
        
        // Creating mock resources for emoji configurations
        Resource emoji1 = mock(Resource.class);
        ValueMap valueMap1 = mock(ValueMap.class);
        when(valueMap1.get("emojiName", String.class)).thenReturn("e1-0-grinning-face");
        when(valueMap1.get("emojiValue", String.class)).thenReturn("&#128540");
        when(emoji1.adaptTo(ValueMap.class)).thenReturn(valueMap1);
        childResources.add(emoji1);

        Resource emoji2 = mock(Resource.class);
        ValueMap valueMap2 = mock(ValueMap.class);
        when(valueMap2.get("emojiName", String.class)).thenReturn("e0-6-grinning-face-with-big-eye");
        when(valueMap2.get("emojiValue", String.class)).thenReturn("&#x1F600");
        when(emoji2.adaptTo(ValueMap.class)).thenReturn(valueMap2);
        childResources.add(emoji2);

        // Mock the resource that contains the emoji configs
        when(resourceMock.listChildren()).thenReturn(childResources.iterator());

        // Instantiate the model and set the resource
        emojiConfigModel = new RTEEmojiConfigModel();
        // Assume there's a method in the model to set the resource or adjust the constructor accordingly
        // e.g., emojiConfigModel.setResource(resourceMock);
    }

    @Test
    public void testGetEmojiConfigs() {
        // Call the method under test
        List<RTEEmojiConfigBean> emojiConfigs = emojiConfigModel.getEmojiConfigs();

        // Assert that the number of emojis is as expected
        assertEquals(2, emojiConfigs.size());
        assertEquals("e1-0-grinning-face", emojiConfigs.get(0).getEmojiName());
        assertEquals("&#128540", emojiConfigs.get(0).getEmojiValue());
        assertEquals("e0-6-grinning-face-with-big-eye", emojiConfigs.get(1).getEmojiName());
        assertEquals("&#x1F600", emojiConfigs.get(1).getEmojiValue());
    }

    @Test
    public void testGetEmojiConfigsEmpty() {
        // Set the resource to return an empty list of children
        when(resourceMock.listChildren()).thenReturn(Collections.emptyIterator());

        // Call the method under test
        List<RTEEmojiConfigBean> emojiConfigs = emojiConfigModel.getEmojiConfigs();

        // Assert that the returned list is empty
        assertEquals(0, emojiConfigs.size());
    }
}
