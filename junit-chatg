package com.responsive.cer.models;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

@RunWith(PowerMockRunner.class)
@PrepareForTest(RTEEmojiConfigModel.class)
public class RTEEmojiConfigModelTest {

    private Resource mockResource;
    private Resource emojiConfigResource;
    private RTEEmojiConfigModel emojiConfigModel;

    @Before
    public void setUp() {
        // Mock the parent resource
        mockResource = Mockito.mock(Resource.class);

        // Mock the emojiConfig resource
        emojiConfigResource = Mockito.mock(Resource.class);
        Mockito.when(mockResource.getChild("emojiconfig")).thenReturn(emojiConfigResource);

        // Mock the child resources for emoji configs
        Resource emojiConfigsResource = Mockito.mock(Resource.class);
        Mockito.when(emojiConfigResource.getChild("emojiConfigs")).thenReturn(emojiConfigsResource);

        // Mock individual emoji resources
        Resource emoji1 = createMockEmojiResource("item0", "e1-0-grinning-face", "&#128540");
        Resource emoji2 = createMockEmojiResource("item1", "e0-6-grinning-face-with-big-eye", "&#x1F600");

        Mockito.when(emojiConfigsResource.listChildren()).thenReturn(Arrays.asList(emoji1, emoji2).iterator());

        // Create the model and adapt it
        emojiConfigModel = PowerMockito.mock(RTEEmojiConfigModel.class);
        PowerMockito.when(emojiConfigResource.adaptTo(RTEEmojiConfigModel.class)).thenReturn(emojiConfigModel);
    }

    private Resource createMockEmojiResource(String name, String emojiName, String emojiValue) {
        Resource emojiResource = Mockito.mock(Resource.class);
        ValueMap valueMap = Mockito.mock(ValueMap.class);
        Mockito.when(valueMap.get("emojiName", String.class)).thenReturn(emojiName);
        Mockito.when(valueMap.get("emojiValue", String.class)).thenReturn(emojiValue);

        Mockito.when(emojiResource.adaptTo(ValueMap.class)).thenReturn(valueMap);
        return emojiResource;
    }

    @Test
    public void testGetEmojiConfigs() {
        // Simulate the behavior of the getEmojiConfigs method
        List<RTEEmojiConfigBean> emojiBeans = emojiConfigModel.getEmojiConfigs();

        assertNotNull("EmojiConfigModel should not be null", emojiConfigModel);
        assertNotNull("EmojiConfigs list should not be null", emojiBeans);
        assertEquals("Expected 2 emoji configs", 2, emojiBeans.size());

        // Verify the properties of each RTEEmojiConfigBean
        assertEquals("Unexpected emoji name for item0", "e1-0-grinning-face", emojiBeans.get(0).getEmojiName());
        assertEquals("Unexpected emoji value for item0", "&#128540", emojiBeans.get(0).getEmojiValue());

        assertEquals("Unexpected emoji name for item1", "e0-6-grinning-face-with-big-eye", emojiBeans.get(1).getEmojiName());
        assertEquals("Unexpected emoji value for item1", "&#x1F600", emojiBeans.get(1).getEmojiValue());
    }
}
