(function($, CUI, $document){
    var GROUP = "experience-aem-emojis",
        INSERT_EMOJI_FEATURE = "insertEmoji",
        EAEM_INSERT_EMOJI_DIALOG = "eaemTouchUIInsertEmojiDialog",
         CANCEL_CSS = "[data-foundation-wizard-control-action='cancel']",
	   GROUP_FEATURE = GROUP + "#" + INSERT_EMOJI_FEATURE,
        SENDER = "experience-aem", REQUESTER = "requester",$emojiVarPicker
        FONT_SELECTOR_URL = "/apps/responsive/components/configs/emojiconfig/eaem-emojis-rte-plugin/emoji-selector.html",
        url = document.location.pathname;


     if((url.indexOf("/editor.html") == 0)
            || ( url.indexOf("/mnt/overlay/dam/cfm/admin/content/v2/fragment-editor.html") == 0) ){
           extendStyledTextEditor();
            addPlugin();
            addDialogTemplate();
    } if(url.indexOf(FONT_SELECTOR_URL) == 0){
        handlePicker();
		return;
    }

 
    function handlePicker(){
         $document.on("click", CANCEL_CSS, sendCancelMessage);
        $document.on("click", "#eaem-emojis span", addEmojiSelectListener);
    }

    function addEmojiSelectListener(){
        var message = {
            sender: SENDER,
            action: "submit",
            data: {
                emoji: $(this).html()
            }
        };
        getParent().postMessage(JSON.stringify(message), "*");

    }
     function sendCancelMessage(){
         console.log("inside cancel");
        var message = {
            sender: SENDER,
            action: "cancel"
        };

        getParent().postMessage(JSON.stringify(message), "*");
    }

    function getParent() {
        if (window.opener) {
            return window.opener;
        }

        return parent;
    }


    function addDialogTemplate(){
        var url = Granite.HTTP.externalize(FONT_SELECTOR_URL) + "?" + REQUESTER + "=" + SENDER;

        var html = "<iframe width='700px' height='300px' frameBorder='0' src='" + url + "'></iframe>";

        if(_.isUndefined(CUI.rte.Templates)){
            CUI.rte.Templates = {};
        }

        if(_.isUndefined(CUI.rte.templates)){
            CUI.rte.templates = {};
        }

        CUI.rte.templates['dlg-' + EAEM_INSERT_EMOJI_DIALOG] = CUI.rte.Templates['dlg-' + EAEM_INSERT_EMOJI_DIALOG] = Handlebars.compile(html);
    }
  function receiveMessage(event) {
                    event = event.originalEvent || {};

                    if (_.isEmpty(event.data)) {
                        return;
                    }

                    var message, action;

                    try{
                        message = JSON.parse(event.data);
                    }catch(err){
                        return;
                    }

                    if (!message || message.sender !== SENDER) {
                        return;
                    }

                    action = message.action;

                    if(action === "submit"){
                        $emojiVarPicker.emojiPlugin.editorKernel.relayCmd(INSERT_EMOJI_FEATURE, message.data);

                    }

                    var modal = $emojiVarPicker.data('modal');
        modal.hide();
        modal.$element.remove();
                }

	
	function extendStyledTextEditor(){
        
        var origFn = Dam.CFM.StyledTextEditor.prototype._start;
        Dam.CFM.StyledTextEditor.prototype._start = function(){
            addRTEPluginSettings(this);
            origFn.call(this);
        }
    }
	
	function addRTEPluginSettings(editor){
        var config = editor.$editable.data("config");

        config.rtePlugins[GROUP] = {
            features: "*"
        };
       
 config.uiSettings.cui.multieditorFullscreen.toolbar.push(GROUP_FEATURE);
		  config.uiSettings.cui.inline.toolbar.push(GROUP_FEATURE);

		}

    var EAEMInsertEmojiDialog = new Class({
        extend: CUI.rte.ui.cui.AbstractDialog,

        toString: "EAEMInsertEmojiDialog",

        initialize: function(config) {
            this.exec = config.execute;
        },

        getDataType: function() {
            return EAEM_INSERT_EMOJI_DIALOG;
        }
    });

    function addPlugin(){

        var EAEMTouchUIInsertEmojiPlugin = new Class({
            toString: "EAEMTouchUIInsertEmojiPlugin",

            extend: CUI.rte.plugins.Plugin,

            pickerUI: null,

            getFeatures: function() {
                return [ INSERT_EMOJI_FEATURE ];
            },
  notifyPluginConfig: function (pluginConfig) {
                var defaults = {
                    tooltips: {}
                };

                defaults.tooltips[INSERT_EMOJI_FEATURE] = {
                    title: "Click an emoji..."
                };

                CUI.rte.Utils.applyDefaults(pluginConfig, defaults);

                this.config = pluginConfig;
            },
            initializeUI: function(tbGenerator) {
                var plg = CUI.rte.plugins;

                if (!this.isFeatureEnabled(INSERT_EMOJI_FEATURE)) {
                    return;
                }

                this.pickerUI = tbGenerator.createElement(INSERT_EMOJI_FEATURE, this, false, { title: "Select Emoji..." });
                tbGenerator.addElement(GROUP, plg.Plugin.SORT_FORMAT, this.pickerUI, 10);

                var groupFeature = GROUP + "#" + INSERT_EMOJI_FEATURE;
                tbGenerator.registerIcon(groupFeature, "heart");
                  $(window).off('message', receiveMessage).on('message', receiveMessage);
            },

            execute: function (pluginCommand, value, envOptions) {


                if (pluginCommand != INSERT_EMOJI_FEATURE) {
                    return;
                }
                this.showFontModal(this.getPickerIFrameUrl());
            },

            showFontModal: function(url){
                var self = this, $iframe = $('<iframe>'),
                    $modal = $('<div>').addClass('eaem-cfm-emoji coral-Modal');

                $iframe.attr('src', url).appendTo($modal);

                $modal.appendTo('body').modal({
                    type: 'default',
                    buttons: [],
                    visible: true
                });

                $emojiVarPicker = $modal;

                $emojiVarPicker.emojiPlugin = self;

                $modal.nextAll(".coral-Modal-backdrop").addClass("cfm-coral2-backdrop");
            },

            getPickerIFrameUrl: function(){
                return Granite.HTTP.externalize(FONT_SELECTOR_URL) + "?" + REQUESTER + "=" + SENDER;
            }
        });

        var EAEMTouchUIEmojiCmd = new Class({
            toString: "EAEMTouchUIEmojiCmd",

            extend: CUI.rte.commands.Command,

            isCommand: function (cmdStr) {
                return (cmdStr.toLowerCase() == INSERT_EMOJI_FEATURE);
            },

            getProcessingOptions: function () {
                var cmd = CUI.rte.commands.Command;
                return cmd.PO_SELECTION | cmd.PO_BOOKMARK | cmd.PO_NODELIST;
            },

            execute: function (execDef) {


                  execDef.value = Object.values(execDef.value).join(" ");

                CUI.rte.commands.InsertHtml().execute(execDef);
            },

            queryState: function(selectionDef, cmd) {
                return false;
            }
        });

        CUI.rte.commands.CommandRegistry.register(INSERT_EMOJI_FEATURE, EAEMTouchUIEmojiCmd);

        CUI.rte.plugins.PluginRegistry.register(GROUP,EAEMTouchUIInsertEmojiPlugin);
    }
}(jQuery, window.CUI,jQuery(document)));
